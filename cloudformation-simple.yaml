AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bintec Demo - AWS Infrastructure Simplificada'

Parameters:
  DomainName:
    Type: String
    Default: 'blend360.com'
    Description: 'Domain name for SES email sending'

Resources:
  # S3 Bucket for PDF storage
  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'bintec-demo-reports-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BintecDemoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub '${ReportsBucket}/*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  # Lambda function for Bedrock analysis
  BedrockAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bintec-bedrock-analysis
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              try {
                  const { question, userData } = JSON.parse(event.body);
                  
                  // Mock response for demo
                  const mockAnalysis = `Análisis financiero para ${userData.name} (${userData.position}):
                  
                  Basado en su consulta: "${question}"
                  
                  1. ANÁLISIS ACTUAL:
                  - Su perfil como ${userData.position} indica experiencia en el sector
                  - La consulta sugiere interés en optimización de procesos
                  
                  2. OPORTUNIDADES IDENTIFICADAS:
                  - Digitalización de procesos: Potencial ahorro del 15-20%
                  - Automatización de reportes: Reducción de tiempo del 40%
                  - Análisis predictivo: Mejora en toma de decisiones del 25%
                  
                  3. PROYECCIÓN PROSPECTIVA:
                  - ROI esperado: 12-15% en 12 meses
                  - Tiempo de implementación: 3-6 meses
                  - Nivel de riesgo: Bajo-Medio
                  
                  4. RECOMENDACIONES:
                  - Iniciar con piloto en área específica
                  - Capacitación del equipo en nuevas tecnologías
                  - Implementación gradual por fases`;
                  
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'POST'
                      },
                      body: JSON.stringify({
                          success: true,
                          analysis: mockAnalysis,
                          prospectiveData: {
                              growthProjection: '15.2%',
                              riskLevel: 'Medio',
                              timeframe: '12 meses',
                              confidence: '85%',
                              keyMetrics: [
                                  { name: 'ROI Proyectado', value: '12.1%' },
                                  { name: 'Reducción de Costos', value: '8.5%' },
                                  { name: 'Eficiencia Operativa', value: '+25%' }
                              ]
                          }
                      })
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      headers: {
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          success: false,
                          error: error.message
                      })
                  };
              }
          };

  # Agent Orchestrator Function
  AgentOrchestratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-orchestrator
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            try {
              const { userData, question } = JSON.parse(event.body);
              
              // Simular procesamiento de agentes
              const agents = [
                {
                  agentType: "documental",
                  status: "completed",
                  reasoning: `Análisis documental para ${userData.position}: Documentación completa requerida para ${question}`,
                  confidence: 88,
                  timestamp: new Date().toISOString()
                },
                {
                  agentType: "riesgo",
                  status: "completed", 
                  reasoning: `Análisis de riesgos para ${userData.position}: Exposición moderada identificada en contexto de ${question}`,
                  confidence: 82,
                  timestamp: new Date().toISOString()
                },
                {
                  agentType: "regulatorio",
                  status: "completed",
                  reasoning: `Análisis regulatorio para ${userData.position}: Cumplimiento óptimo verificado para ${question}`,
                  confidence: 94,
                  timestamp: new Date().toISOString()
                },
                {
                  agentType: "negocio",
                  status: "completed",
                  reasoning: `Análisis de negocio para ${userData.position}: Oportunidades de crecimiento identificadas en ${question}`,
                  confidence: 89,
                  timestamp: new Date().toISOString()
                }
              ];
              
              return {
                statusCode: 200,
                headers: { "Access-Control-Allow-Origin": "*" },
                body: JSON.stringify({
                  orchestrationId: `orch_${Date.now()}`,
                  agents: agents,
                  summary: { totalAgents: agents.length, completedAgents: agents.length }
                })
              };
            } catch (error) {
              return {
                statusCode: 500,
                headers: { "Access-Control-Allow-Origin": "*" },
                body: JSON.stringify({ success: false, error: error.message })
              };
            }
          };

  # Send Email Function
  SendEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bintec-send-email
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SES_FROM_EMAIL: 'juan.tinjaca@blend360.com'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            try {
              const { userData, reportUrl } = JSON.parse(event.body);
              
              // Mock email sending
              console.log(`Enviando email a ${userData.email} con reporte ${reportUrl}`);
              
              return {
                statusCode: 200,
                headers: { "Access-Control-Allow-Origin": "*" },
                body: JSON.stringify({
                  success: true,
                  message: `Email enviado exitosamente a ${userData.email}`,
                  messageId: `msg_${Date.now()}`
                })
              };
            } catch (error) {
              return {
                statusCode: 500,
                headers: { "Access-Control-Allow-Origin": "*" },
                body: JSON.stringify({ success: false, error: error.message })
              };
            }
          };

  # Generate PDF Function
  GeneratePDFFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bintec-generate-pdf
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref ReportsBucket
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            try {
              const { userData, analysisData } = JSON.parse(event.body);
              
              // Mock PDF generation
              const fileName = `reporte_${userData.name.replace(/\s+/g, '_')}_${Date.now()}.pdf`;
              const mockUrl = `https://${process.env.S3_BUCKET}.s3.amazonaws.com/${fileName}`;
              
              return {
                statusCode: 200,
                headers: { "Access-Control-Allow-Origin": "*" },
                body: JSON.stringify({
                  success: true,
                  pdfUrl: mockUrl,
                  fileName: fileName
                })
              };
            } catch (error) {
              return {
                statusCode: 500,
                headers: { "Access-Control-Allow-Origin": "*" },
                body: JSON.stringify({ success: false, error: error.message })
              };
            }
          };

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bintec-demo-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Bedrock Analysis Resource
  BedrockAnalysisResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: bedrock-analysis

  BedrockAnalysisMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BedrockAnalysisResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockAnalysisFunction.Arn}/invocations'

  BedrockAnalysisOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BedrockAnalysisResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Agent Orchestrator Resource
  AgentOrchestratorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-orchestrator

  AgentOrchestratorMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentOrchestratorResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentOrchestratorFunction.Arn}/invocations'

  AgentOrchestratorOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentOrchestratorResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Send Email Resource
  SendEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: send-email

  SendEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SendEmailResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendEmailFunction.Arn}/invocations'

  SendEmailOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SendEmailResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Generate PDF Resource
  GeneratePDFResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: generate-pdf

  GeneratePDFMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GeneratePDFResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePDFFunction.Arn}/invocations'

  GeneratePDFOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GeneratePDFResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - BedrockAnalysisMethod
      - BedrockAnalysisOptionsMethod
      - AgentOrchestratorMethod
      - AgentOrchestratorOptionsMethod
      - SendEmailMethod
      - SendEmailOptionsMethod
      - GeneratePDFMethod
      - GeneratePDFOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  # Lambda Permissions
  BedrockAnalysisLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  AgentOrchestratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentOrchestratorFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  SendEmailLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendEmailFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  GeneratePDFLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GeneratePDFFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
  S3Bucket:
    Description: 'S3 bucket for reports'
    Value: !Ref ReportsBucket