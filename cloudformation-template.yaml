AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bintec Demo - AWS Infrastructure'

Parameters:
  DomainName:
    Type: String
    Default: 'blend360.com'
    Description: 'Domain name for SES email sending'

Resources:
  # S3 Bucket for PDF storage
  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'bintec-demo-reports-${AWS::AccountId}-${AWS::StackName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESAndS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub '${ReportsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  # Lambda function for sending emails
  SendEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bintec-send-email
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SES_FROM_EMAIL: 'juan.tinjaca@blend360.com'
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ses = new AWS.SES();
          exports.handler = async (event) => {
            return { statusCode: 200, body: JSON.stringify({ success: true }) };
          };

  # Lambda function for PDF generation
  GeneratePDFFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bintec-generate-pdf
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref ReportsBucket
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          exports.handler = async (event) => {
            return { statusCode: 200, body: JSON.stringify({ success: true }) };
          };

  # Lambda function for Bedrock analysis
  BedrockAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bintec-bedrock-analysis
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          const { BedrockRuntimeClient, InvokeModelCommand } = require('@aws-sdk/client-bedrock-runtime');
          const client = new BedrockRuntimeClient({ region: 'us-east-1' });
          
          exports.handler = async (event) => {
              try {
                  const { question, userData } = JSON.parse(event.body);
                  
                  const prompt = `Eres un analista financiero experto de Grupo CIBest. 
                  
          Cliente: ${userData.name} (${userData.position})
          Pregunta: ${question}
          
          Proporciona un análisis financiero profesional que incluya:
          1. Análisis de la situación actual
          2. Identificación de riesgos y oportunidades  
          3. Proyección prospectiva específica
          4. Recomendaciones estratégicas
          
          Responde de forma concisa y profesional en español.`;
          
                  const params = {
                      modelId: 'anthropic.claude-3-sonnet-20240229-v1:0',
                      contentType: 'application/json',
                      accept: 'application/json',
                      body: JSON.stringify({
                          anthropic_version: "bedrock-2023-05-31",
                          max_tokens: 1000,
                          messages: [{
                              role: "user",
                              content: prompt
                          }]
                      })
                  };
          
                  const command = new InvokeModelCommand(params);
                  const response = await client.send(command);
                  const responseBody = JSON.parse(new TextDecoder().decode(response.body));
                  
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'POST'
                      },
                      body: JSON.stringify({
                          success: true,
                          analysis: responseBody.content[0].text,
                          prospectiveData: {
                              growthProjection: '15.2%',
                              riskLevel: 'Medio',
                              timeframe: '12 meses',
                              confidence: '85%',
                              keyMetrics: [
                                  { name: 'ROI Proyectado', value: '12.1%' },
                                  { name: 'Reducción de Costos', value: '8.5%' },
                                  { name: 'Eficiencia Operativa', value: '+25%' }
                              ]
                          }
                      })
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      headers: {
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          success: false,
                          error: error.message
                      })
                  };
              }
          };

  # Agent Lambda Functions
  AgentDocumentalFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-documental
      Runtime: nodejs18.x
      Handler: agent-documental.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            return {
              statusCode: 200,
              headers: { "Access-Control-Allow-Origin": "*" },
              body: JSON.stringify({
                agentType: "documental",
                status: "completed",
                reasoning: `Análisis documental para ${userData.position}: Documentación completa requerida`,
                confidence: 88,
                timestamp: new Date().toISOString()
              })
            };
          };

  AgentRiesgoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-riesgo
      Runtime: nodejs18.x
      Handler: agent-riesgo.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            return {
              statusCode: 200,
              headers: { "Access-Control-Allow-Origin": "*" },
              body: JSON.stringify({
                agentType: "riesgo",
                status: "completed",
                reasoning: `Análisis de riesgos para ${userData.position}: Exposición moderada identificada`,
                confidence: 82,
                timestamp: new Date().toISOString()
              })
            };
          };

  AgentRegulatorioFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-regulatorio
      Runtime: nodejs18.x
      Handler: agent-regulatorio.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            return {
              statusCode: 200,
              headers: { "Access-Control-Allow-Origin": "*" },
              body: JSON.stringify({
                agentType: "regulatorio",
                status: "completed",
                reasoning: `Análisis regulatorio para ${userData.position}: Cumplimiento óptimo verificado`,
                confidence: 94,
                timestamp: new Date().toISOString()
              })
            };
          };

  AgentNegocioFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-negocio
      Runtime: nodejs18.x
      Handler: agent-negocio.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            return {
              statusCode: 200,
              headers: { "Access-Control-Allow-Origin": "*" },
              body: JSON.stringify({
                agentType: "negocio",
                status: "completed",
                reasoning: `Análisis de negocio para ${userData.position}: Oportunidades de crecimiento identificadas`,
                confidence: 89,
                timestamp: new Date().toISOString()
              })
            };
          };

  AgentOrchestratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-orchestrator
      Runtime: nodejs18.x
      Handler: agent-orchestrator.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const lambda = new AWS.Lambda();
          
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            const agents = ['agent-documental', 'agent-riesgo', 'agent-regulatorio', 'agent-negocio'];
            
            const results = await Promise.all(
              agents.map(async (agent) => {
                const params = {
                  FunctionName: agent,
                  Payload: JSON.stringify({ body: JSON.stringify({ userData, question }) })
                };
                const result = await lambda.invoke(params).promise();
                return JSON.parse(JSON.parse(result.Payload).body);
              })
            );
            
            return {
              statusCode: 200,
              headers: { "Access-Control-Allow-Origin": "*" },
              body: JSON.stringify({
                orchestrationId: `orch_${Date.now()}`,
                agents: results,
                summary: { totalAgents: results.length, completedAgents: results.length }
              })
            };
          };

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bintec-demo-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources and Methods
  SendEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: send-email

  SendEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SendEmailResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendEmailFunction.Arn}/invocations'

  SendEmailOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SendEmailResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  GeneratePDFResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: generate-pdf

  GeneratePDFMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GeneratePDFResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePDFFunction.Arn}/invocations'

  GeneratePDFOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GeneratePDFResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  BedrockAnalysisResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: bedrock-analysis

  BedrockAnalysisMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BedrockAnalysisResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockAnalysisFunction.Arn}/invocations'

  BedrockAnalysisOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BedrockAnalysisResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Agent Resources
  AgentDocumentalResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-documental

  AgentDocumentalMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentDocumentalResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentDocumentalFunction.Arn}/invocations'

  AgentDocumentalOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentDocumentalResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AgentRiesgoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-riesgo

  AgentRiesgoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentRiesgoResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentRiesgoFunction.Arn}/invocations'

  AgentRiesgoOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentRiesgoResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AgentRegulatorioResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-regulatorio

  AgentRegulatorioMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentRegulatorioResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentRegulatorioFunction.Arn}/invocations'

  AgentRegulatorioOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentRegulatorioResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AgentNegocioResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-negocio

  AgentNegocioMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentNegocioResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentNegocioFunction.Arn}/invocations'

  AgentNegocioOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentNegocioResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AgentOrchestratorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-orchestrator

  AgentOrchestratorMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentOrchestratorResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentOrchestratorFunction.Arn}/invocations'

  AgentOrchestratorOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentOrchestratorResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SendEmailMethod
      - SendEmailOptionsMethod
      - GeneratePDFMethod
      - GeneratePDFOptionsMethod
      - BedrockAnalysisMethod
      - BedrockAnalysisOptionsMethod
      - AgentDocumentalMethod
      - AgentDocumentalOptionsMethod
      - AgentRiesgoMethod
      - AgentRiesgoOptionsMethod
      - AgentRegulatorioMethod
      - AgentRegulatorioOptionsMethod
      - AgentNegocioMethod
      - AgentNegocioOptionsMethod
      - AgentOrchestratorMethod
      - AgentOrchestratorOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  # Lambda Permissions
  SendEmailLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendEmailFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  GeneratePDFLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GeneratePDFFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  BedrockAnalysisLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # Agent Lambda Permissions
  AgentDocumentalLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentDocumentalFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  AgentRiesgoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentRiesgoFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  AgentRegulatorioLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentRegulatorioFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  AgentNegocioLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentNegocioFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  AgentOrchestratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentOrchestratorFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # Cross-Lambda Permissions for Orchestrator
  OrchestratorInvokeDocumentalPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentDocumentalFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt AgentOrchestratorFunction.Arn

  OrchestratorInvokeRiesgoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentRiesgoFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt AgentOrchestratorFunction.Arn

  OrchestratorInvokeRegulatorioPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentRegulatorioFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt AgentOrchestratorFunction.Arn

  OrchestratorInvokeNegocioPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentNegocioFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt AgentOrchestratorFunction.Arn

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
  S3Bucket:
    Description: 'S3 bucket for reports'
    Value: !Ref ReportsBucket