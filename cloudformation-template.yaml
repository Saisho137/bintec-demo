AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bintec Demo - AWS Infrastructure'

Parameters:
  DomainName:
    Type: String
    Default: 'gmail.com'
    Description: 'Domain name for SES email sending'

Resources:
  # S3 Bucket for PDF storage
  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'bintec-demo-reports-${AWS::AccountId}-${AWS::StackName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ['*']

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESAndS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub '${ReportsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  # Lambda function for sending emails
  SendEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bintec-send-email
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SES_FROM_EMAIL: 'juansebas1307@gmail.com'
      Code:
        ZipFile: |
          const { SESClient, SendEmailCommand } = require('@aws-sdk/client-ses');
          const client = new SESClient({ region: 'us-east-1' });
          
          exports.handler = async (event) => {
              try {
                  const { email, name, question, reportData, analysisResult } = JSON.parse(event.body);
                  
                  const verifiedEmails = [
                      'juansebas1307@gmail.com'
                  ];
                  
                  const isVerified = verifiedEmails.includes(email.toLowerCase());
                  
                  if (isVerified) {
                      const emailParams = {
                          Destination: { ToAddresses: [email] },
                          Message: {
                              Body: {
                                  Html: {
                                      Data: `
                                          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                                              <div style="text-align: center; margin-bottom: 30px; padding: 20px; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); border-radius: 12px;">
                                                  <h2 style="color: #1e40af; margin: 0;">Tu experiencia en el stand ‚Äì An√°lisis Prospectivo con IA</h2>
                                              </div>
                                              <p>Estimado/a ${name},</p>
                                              <p>Gracias por participar en nuestra demostraci√≥n interactiva.</p>
                                              <div style="background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;">
                                                  <p><strong>Tu consulta:</strong> "${question}"</p>
                                              </div>
                                              
                                              <h3 style="color: #1e40af;">An√°lisis de nuestros agentes IA:</h3>
                                              ${analysisResult?.agents?.map(agent => `
                                                  <div style="border-left: 4px solid #3b82f6; padding-left: 15px; margin: 15px 0;">
                                                      <h4 style="color: #374151; margin: 0 0 8px 0;">${agent.agentType.toUpperCase()} (${agent.confidence}% confianza)</h4>
                                                      <p style="margin: 0; color: #6b7280; font-size: 14px;">${agent.reasoning?.substring(0, 300)}...</p>
                                                  </div>
                                              `).join('') || '<p>An√°lisis en proceso...</p>'}
                                              
                                              <h3 style="color: #1e40af;">Recomendaciones principales:</h3>
                                              <ul style="color: #374151;">
                                                  <li>Implementar estrategias de transformaci√≥n digital</li>
                                                  <li>Fortalecer marcos de cumplimiento regulatorio</li>
                                                  <li>Optimizar gesti√≥n de riesgos operacionales</li>
                                              </ul>
                                              
                                              <div style="background-color: #dbeafe; padding: 15px; border-radius: 8px; margin: 20px 0;">
                                                  <p><strong>Confianza promedio del an√°lisis:</strong> ${analysisResult?.agents ? Math.round(analysisResult.agents.reduce((acc, agent) => acc + agent.confidence, 0) / analysisResult.agents.length * 10) / 10 : 86.3}%</p>
                                              </div>
                                              <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #f8fafc; border-radius: 8px;">
                                                  <p style="margin: 0;">Saludos cordiales,</p>
                                                  <p style="font-weight: bold; margin: 10px 0;">Bintec x Blend360</p>
                                                  <p style="font-size: 12px; color: #6b7280;">Powered by AWS</p>
                                              </div>
                                          </div>
                                      `
                                  }
                              },
                              Subject: { Data: 'Tu experiencia en el stand ‚Äì Soluci√≥n de IA Grupo CIBest' }
                          },
                          Source: "juan.tinjaca@blend360.com"
                      };
          
                      const command = new SendEmailCommand(emailParams);
                      const result = await client.send(command);
                      
                      return {
                          statusCode: 200,
                          headers: {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type',
                              'Access-Control-Allow-Methods': 'POST'
                          },
                          body: JSON.stringify({
                              success: true,
                              messageId: result.MessageId,
                              message: `‚úÖ Email REAL enviado a ${email}`,
                              type: 'real'
                          })
                      };
                  } else {
                      console.log(`Demo email simulation for ${email}`);
                      await new Promise(resolve => setTimeout(resolve, 1000));
                      
                      return {
                          statusCode: 200,
                          headers: {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Headers': 'Content-Type',
                              'Access-Control-Allow-Methods': 'POST'
                          },
                          body: JSON.stringify({
                              success: true,
                              messageId: `demo_${Date.now()}`,
                              message: `üìß Email simulado enviado a ${email} (Demo Stand)`,
                              type: 'demo'
                          })
                      };
                  }
              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      headers: { 'Access-Control-Allow-Origin': '*' },
                      body: JSON.stringify({
                          success: false,
                          error: error.message
                      })
                  };
              }
          };

  # Lambda function for PDF generation
  GeneratePDFFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bintec-generate-pdf
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref ReportsBucket
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "POST, OPTIONS"
              },
              body: JSON.stringify({ success: true, message: "PDF generated successfully" })
            };
          };

  # Lambda function for Bedrock analysis
  BedrockAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bintec-bedrock-analysis
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          const { BedrockRuntimeClient, InvokeModelCommand } = require('@aws-sdk/client-bedrock-runtime');
          const client = new BedrockRuntimeClient({ region: 'us-east-1' });
          
          exports.handler = async (event) => {
              try {
                  const { question, userData } = JSON.parse(event.body);
                  
                  const prompt = `Eres un analista financiero experto de Grupo CIBest. 
                  
          Cliente: ${userData.name} (${userData.position})
          Pregunta: ${question}
          
          Proporciona un an√°lisis financiero profesional que incluya:
          1. An√°lisis de la situaci√≥n actual
          2. Identificaci√≥n de riesgos y oportunidades  
          3. Proyecci√≥n prospectiva espec√≠fica
          4. Recomendaciones estrat√©gicas
          
          Responde de forma concisa y profesional en espa√±ol.`;
          
                  const params = {
                      modelId: 'anthropic.claude-3-sonnet-20240229-v1:0',
                      contentType: 'application/json',
                      accept: 'application/json',
                      body: JSON.stringify({
                          anthropic_version: "bedrock-2023-05-31",
                          max_tokens: 1000,
                          messages: [{
                              role: "user",
                              content: prompt
                          }]
                      })
                  };
          
                  const command = new InvokeModelCommand(params);
                  const response = await client.send(command);
                  const responseBody = JSON.parse(new TextDecoder().decode(response.body));
                  
                  return {
                      statusCode: 200,
                      headers: {
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'POST'
                      },
                      body: JSON.stringify({
                          success: true,
                          analysis: responseBody.content[0].text,
                          prospectiveData: {
                              growthProjection: '15.2%',
                              riskLevel: 'Medio',
                              timeframe: '12 meses',
                              confidence: '85%',
                              keyMetrics: [
                                  { name: 'ROI Proyectado', value: '12.1%' },
                                  { name: 'Reducci√≥n de Costos', value: '8.5%' },
                                  { name: 'Eficiencia Operativa', value: '+25%' }
                              ]
                          }
                      })
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      headers: {
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          success: false,
                          error: error.message
                      })
                  };
              }
          };

  # Agent Lambda Functions
  AgentDocumentalFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-documental
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            
            const reasoning = `RAZONAMIENTO DOCUMENTAL para ${userData.name} como ${userData.position}:\n\n1. EVALUACION INICIAL: Documentacion financiera actual presenta nivel alto de cumplimiento con estados financieros auditados y politicas de riesgo actualizadas\n\n2. IDENTIFICACION DE GAPS: ${question.includes('digital') ? 'Falta politica de transformacion digital y procedimientos de ciberseguridad' : 'Documentacion completa segun normativas vigentes'}\n\n3. PROYECCION: Cumplimiento normativo del 88% con CNBV y Banxico, requiere actualizacion trimestral\n\n4. RECOMENDACIONES: Implementar digitalizacion de procesos documentales y establecer repositorio centralizado para ${userData.position}`;
            
            return {
              statusCode: 200,
              headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "POST, OPTIONS"
              },
              body: JSON.stringify({
                agentType: "documental",
                status: "completed",
                reasoning: reasoning,
                confidence: 88,
                timestamp: new Date().toISOString()
              })
            };
          };

  AgentRiesgoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-riesgo
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            
            const reasoning = `EVALUACION DE RIESGOS para ${userData.name} como ${userData.position}:\n\n1. IDENTIFICACION: Riesgo operacional ${question.includes('digital') ? 'medio-alto por transformacion digital' : 'medio'}, crediticio bajo, mercado medio\n\n2. CUANTIFICACION: Probabilidad operacional 15%, crediticia 5%, mercado 12% con VaR estimado 2.3%\n\n3. EVALUACION: Exposicion actual controlada con sistemas de monitoreo establecidos\n\n4. MITIGACION: Diversificacion de cartera, stress testing mensual y monitoreo continuo para ${userData.position}`;
            
            return {
              statusCode: 200,
              headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "POST, OPTIONS"
              },
              body: JSON.stringify({
                agentType: "riesgo",
                status: "completed",
                reasoning: reasoning,
                confidence: 82,
                timestamp: new Date().toISOString()
              })
            };
          };

  AgentRegulatorioFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-regulatorio
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            
            const reasoning = `CUMPLIMIENTO REGULATORIO para ${userData.name} como ${userData.position}:\n\n1. MARCO ACTUAL: CNBV completo, Banxico actualizado, CONDUSEF en revision - score 94%\n\n2. EVALUACION: Nivel de cumplimiento alto con todas las circulares vigentes implementadas\n\n3. CAMBIOS PROXIMOS: Circular 3/2024 sobre FinTech, nuevas disposiciones de ciberseguridad Q2-2024\n\n4. PREPARACION: Plan de adaptacion trimestral y capacitacion especializada para ${userData.position}`;
            
            return {
              statusCode: 200,
              headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "POST, OPTIONS"
              },
              body: JSON.stringify({
                agentType: "regulatorio",
                status: "completed",
                reasoning: reasoning,
                confidence: 90,
                timestamp: new Date().toISOString()
              })
            };
          };

  AgentNegocioFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-negocio
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            
            const reasoning = `OPORTUNIDADES DE NEGOCIO para ${userData.name} como ${userData.position}:\n\n1. OPORTUNIDADES: Banca digital 35% crecimiento, productos sustentables 28%, servicios corporativos 22%\n\n2. COMPETENCIA: Ventaja competitiva en IA y automatizacion, posicionamiento superior en innovacion\n\n3. PROYECCIONES: ROI esperado 15.2% en 12-18 meses, margen neto proyectado 8.5%\n\n4. ESTRATEGIA: Expansion digital acelerada y desarrollo de productos personalizados para ${userData.position}`;
            
            return {
              statusCode: 200,
              headers: {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "POST, OPTIONS"
              },
              body: JSON.stringify({
                agentType: "negocio",
                status: "completed",
                reasoning: reasoning,
                confidence: 85,
                timestamp: new Date().toISOString()
              })
            };
          };

  AgentOrchestratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: agent-orchestrator
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const lambda = new AWS.Lambda();
          
          exports.handler = async (event) => {
            const { userData, question } = JSON.parse(event.body);
            const agents = ['agent-documental', 'agent-riesgo', 'agent-regulatorio', 'agent-negocio'];
            
            const results = await Promise.all(
              agents.map(async (agent) => {
                const params = {
                  FunctionName: agent,
                  Payload: JSON.stringify({ body: JSON.stringify({ userData, question }) })
                };
                const result = await lambda.invoke(params).promise();
                return JSON.parse(JSON.parse(result.Payload).body);
              })
            );
            
            return {
              statusCode: 200,
              headers: { "Access-Control-Allow-Origin": "*" },
              body: JSON.stringify({
                orchestrationId: `orch_${Date.now()}`,
                agents: results,
                summary: { totalAgents: results.length, completedAgents: results.length }
              })
            };
          };

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bintec-demo-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources and Methods
  SendEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: send-email

  SendEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SendEmailResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendEmailFunction.Arn}/invocations'

  SendEmailOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SendEmailResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  GeneratePDFResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: generate-pdf

  GeneratePDFMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GeneratePDFResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GeneratePDFFunction.Arn}/invocations'

  GeneratePDFOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref GeneratePDFResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  BedrockAnalysisResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: bedrock-analysis

  BedrockAnalysisMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BedrockAnalysisResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockAnalysisFunction.Arn}/invocations'

  BedrockAnalysisOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref BedrockAnalysisResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Agent Resources
  AgentDocumentalResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-documental

  AgentDocumentalMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentDocumentalResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentDocumentalFunction.Arn}/invocations'

  AgentDocumentalOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentDocumentalResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AgentRiesgoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-riesgo

  AgentRiesgoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentRiesgoResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentRiesgoFunction.Arn}/invocations'

  AgentRiesgoOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentRiesgoResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AgentRegulatorioResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-regulatorio

  AgentRegulatorioMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentRegulatorioResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentRegulatorioFunction.Arn}/invocations'

  AgentRegulatorioOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentRegulatorioResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AgentNegocioResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-negocio

  AgentNegocioMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentNegocioResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentNegocioFunction.Arn}/invocations'

  AgentNegocioOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentNegocioResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  AgentOrchestratorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: agent-orchestrator

  AgentOrchestratorMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentOrchestratorResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AgentOrchestratorFunction.Arn}/invocations'

  AgentOrchestratorOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AgentOrchestratorResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SendEmailMethod
      - SendEmailOptionsMethod
      - GeneratePDFMethod
      - GeneratePDFOptionsMethod
      - BedrockAnalysisMethod
      - BedrockAnalysisOptionsMethod
      - AgentDocumentalMethod
      - AgentDocumentalOptionsMethod
      - AgentRiesgoMethod
      - AgentRiesgoOptionsMethod
      - AgentRegulatorioMethod
      - AgentRegulatorioOptionsMethod
      - AgentNegocioMethod
      - AgentNegocioOptionsMethod
      - AgentOrchestratorMethod
      - AgentOrchestratorOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  # Lambda Permissions
  SendEmailLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendEmailFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  GeneratePDFLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GeneratePDFFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  BedrockAnalysisLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # Agent Lambda Permissions
  AgentDocumentalLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentDocumentalFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  AgentRiesgoLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentRiesgoFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  AgentRegulatorioLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentRegulatorioFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  AgentNegocioLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentNegocioFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  AgentOrchestratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentOrchestratorFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # Cross-Lambda Permissions for Orchestrator
  OrchestratorInvokeDocumentalPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentDocumentalFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt AgentOrchestratorFunction.Arn

  OrchestratorInvokeRiesgoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentRiesgoFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt AgentOrchestratorFunction.Arn

  OrchestratorInvokeRegulatorioPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentRegulatorioFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt AgentOrchestratorFunction.Arn

  OrchestratorInvokeNegocioPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentNegocioFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt AgentOrchestratorFunction.Arn

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
  S3Bucket:
    Description: 'S3 bucket for reports'
    Value: !Ref ReportsBucket